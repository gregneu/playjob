-- –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê REALTIME –î–õ–Ø –¢–ò–ö–ï–¢–û–í
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ Supabase SQL Editor

-- ============================================
-- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ REALTIME Publication
-- ============================================
SELECT 
  'Step 1: Realtime Publication' as check_step,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ object_tickets IS in realtime publication'
    ELSE '‚ùå object_tickets is NOT in realtime publication - RUN enable_realtime_object_tickets.sql!'
  END as status
FROM pg_publication_tables 
WHERE pubname = 'supabase_realtime'
  AND tablename = 'object_tickets';

-- ============================================
-- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ REPLICA IDENTITY
-- ============================================
SELECT 
  'Step 2: Replica Identity' as check_step,
  CASE c.relreplident
    WHEN 'd' THEN '‚ö†Ô∏è DEFAULT - only PK in old payload (run migration!)'
    WHEN 'f' THEN '‚úÖ FULL - all columns in old payload'
    WHEN 'i' THEN '‚ö†Ô∏è INDEX'
    WHEN 'n' THEN '‚ùå NOTHING'
  END as status
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
WHERE n.nspname = 'public' 
  AND c.relname = 'object_tickets';

-- ============================================
-- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS (Row Level Security)
-- ============================================
SELECT 
  'Step 3: RLS Status' as check_step,
  CASE 
    WHEN rowsecurity THEN '‚úÖ RLS enabled'
    ELSE '‚ùå RLS disabled'
  END as status
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename = 'object_tickets';

-- ============================================
-- 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ü–æ–ª–∏—Ç–∏–∫ –¥–ª—è SELECT
-- ============================================
SELECT 
  'Step 4: RLS SELECT Policies' as check_step,
  COUNT(*) as policy_count,
  CASE 
    WHEN COUNT(*) = 0 THEN '‚ùå NO SELECT policies - users cannot read tickets!'
    WHEN COUNT(*) > 0 THEN '‚úÖ SELECT policies exist'
  END as status
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename = 'object_tickets'
  AND cmd = 'SELECT';

-- –î–µ—Ç–∞–ª–∏ SELECT –ø–æ–ª–∏—Ç–∏–∫
SELECT 
  '  Policy details:' as info,
  policyname,
  qual as using_expression,
  permissive
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename = 'object_tickets'
  AND cmd = 'SELECT';

-- ============================================
-- 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ column project_id –≤ object_tickets
-- ============================================
SELECT 
  'Step 5: Column Check' as check_step,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ zone_object_id column exists'
    ELSE '‚ùå zone_object_id column missing!'
  END as status
FROM information_schema.columns 
WHERE table_schema = 'public' 
  AND table_name = 'object_tickets'
  AND column_name = 'zone_object_id';

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ project_id (–µ–≥–æ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
SELECT 
  'Step 5b: project_id column' as check_step,
  CASE 
    WHEN COUNT(*) = 0 THEN '‚úÖ project_id does NOT exist (correct)'
    ELSE '‚ö†Ô∏è project_id exists (unexpected)'
  END as status
FROM information_schema.columns 
WHERE table_schema = 'public' 
  AND table_name = 'object_tickets'
  AND column_name = 'project_id';

-- ============================================
-- 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ zone_objects -> zones -> projects
-- ============================================
SELECT 
  'Step 6: Data Relationship Test' as check_step,
  COUNT(DISTINCT ot.id) as total_tickets,
  COUNT(DISTINCT zo.id) as zone_objects_count,
  COUNT(DISTINCT z.id) as zones_count,
  COUNT(DISTINCT z.project_id) as projects_count,
  CASE 
    WHEN COUNT(DISTINCT ot.id) > 0 AND COUNT(DISTINCT z.project_id) > 0 
    THEN '‚úÖ Relationships look good'
    ELSE '‚ö†Ô∏è Some relationships missing'
  END as status
FROM object_tickets ot
LEFT JOIN zone_objects zo ON zo.id = ot.zone_object_id
LEFT JOIN zones z ON z.id = zo.zone_id;

-- ============================================
-- 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
-- ============================================
SELECT 
  'Step 7: Indexes' as check_step,
  COUNT(*) as index_count,
  string_agg(indexname, ', ') as index_names
FROM pg_indexes 
WHERE schemaname = 'public' 
  AND tablename = 'object_tickets';

-- ============================================
-- 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–∏–∫–µ—Ç–æ–≤)
-- ============================================
SELECT 
  'Step 8: Recent Activity' as check_step,
  id as ticket_id,
  zone_object_id,
  title,
  updated_at,
  created_at
FROM object_tickets 
ORDER BY updated_at DESC NULLS LAST
LIMIT 5;

-- ============================================
-- –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê
-- ============================================
SELECT 
  '========================================' as summary,
  'CRITICAL CHECKS SUMMARY' as description;

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
WITH checks AS (
  SELECT 
    (SELECT COUNT(*) FROM pg_publication_tables WHERE pubname = 'supabase_realtime' AND tablename = 'object_tickets') > 0 as realtime_enabled,
    (SELECT relreplident FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'public' AND c.relname = 'object_tickets') = 'f' as replica_full,
    (SELECT COUNT(*) FROM pg_policies WHERE schemaname = 'public' AND tablename = 'object_tickets' AND cmd = 'SELECT') > 0 as has_select_policy,
    (SELECT rowsecurity FROM pg_tables WHERE schemaname = 'public' AND tablename = 'object_tickets') as rls_enabled
)
SELECT 
  CASE WHEN realtime_enabled THEN '‚úÖ' ELSE '‚ùå' END || ' Realtime Publication' as check_1,
  CASE WHEN replica_full THEN '‚úÖ' ELSE '‚ö†Ô∏è' END || ' Replica Identity FULL' as check_2,
  CASE WHEN has_select_policy THEN '‚úÖ' ELSE '‚ùå' END || ' SELECT Policies' as check_3,
  CASE WHEN rls_enabled THEN '‚úÖ' ELSE '‚ùå' END || ' RLS Enabled' as check_4,
  CASE 
    WHEN realtime_enabled AND replica_full AND has_select_policy AND rls_enabled 
    THEN 'üéâ ALL CHECKS PASSED - Realtime should work!'
    ELSE '‚ö†Ô∏è SOME CHECKS FAILED - See details above'
  END as overall_status
FROM checks;

