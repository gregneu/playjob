// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Supabase API
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/add_test_users.js

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const testUsers = [
  {
    id: '11111111-1111-1111-1111-111111111111',
    full_name: 'John Doe',
    email: 'john@example.com',
    username: 'johndoe',
    bio: 'Frontend Developer, –ª—é–±–∏—Ç React –∏ TypeScript'
  },
  {
    id: '22222222-2222-2222-2222-222222222222',
    full_name: 'Jane Smith',
    email: 'jane@example.com',
    username: 'janesmith',
    bio: 'Backend Developer, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Node.js –∏ PostgreSQL'
  },
  {
    id: '33333333-3333-3333-3333-333333333333',
    full_name: 'Mike Johnson',
    email: 'mike@example.com',
    username: 'mikejohnson',
    bio: 'UI/UX Designer, —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã'
  },
  {
    id: '44444444-4444-4444-4444-444444444444',
    full_name: 'Sarah Wilson',
    email: 'sarah@example.com',
    username: 'sarahwilson',
    bio: 'Product Manager, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–∞'
  },
  {
    id: '55555555-5555-5555-5555-555555555555',
    full_name: 'Alex Brown',
    email: 'alex@example.com',
    username: 'alexbrown',
    bio: 'DevOps Engineer, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç CI/CD –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É'
  }
]

async function createProfilesTable() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É profiles...')
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É profiles
    const { error } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS profiles (
          id UUID PRIMARY KEY,
          full_name TEXT,
          email TEXT,
          avatar_url TEXT,
          username TEXT,
          bio TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    })
    
    if (error) {
      console.log('‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ profiles —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞')
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ profiles —Å–æ–∑–¥–∞–Ω–∞')
    }
  } catch (err) {
    console.log('‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ profiles —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
  }
}

async function addTestUsers() {
  console.log('üë• –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
  
  for (const user of testUsers) {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .upsert(user, { onConflict: 'id' })
        .select()
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${user.full_name}:`, error.message)
      } else {
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.full_name} (${user.username})`)
      }
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${user.full_name}:`, err.message)
    }
  }
}

async function verifyUsers() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
  
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .order('created_at')
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message)
      return
    }
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${data.length}`)
    data.forEach(user => {
      console.log(`  - ${user.full_name} (${user.username}) - ${user.email}`)
    })
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message)
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n')
  
  try {
    await createProfilesTable()
    await addTestUsers()
    await verifyUsers()
    
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
    console.log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main()
