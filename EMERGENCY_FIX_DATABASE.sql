-- –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•
-- –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ Supabase SQL Editor

-- 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏
DROP POLICY IF EXISTS "Users can view project members" ON project_members;
DROP POLICY IF EXISTS "Project owners can add members" ON project_members;
DROP POLICY IF EXISTS "Project owners and admins can manage members" ON project_members;
DROP POLICY IF EXISTS "Allow project member creation" ON project_members;
DROP POLICY IF EXISTS "Allow project creation" ON project_members;

DROP POLICY IF EXISTS "Users can view their own projects" ON projects;
DROP POLICY IF EXISTS "Users can create their own projects" ON projects;
DROP POLICY IF EXISTS "Users can update their own projects" ON projects;
DROP POLICY IF EXISTS "Users can delete their own projects" ON projects;

-- 2. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é RPC —Ñ—É–Ω–∫—Ü–∏—é
DROP FUNCTION IF EXISTS create_project_and_members(text,text,text,text);
DROP FUNCTION IF EXISTS create_project_and_members(text,text,text,text,text);
DROP FUNCTION IF EXISTS create_project_and_members(text);
DROP FUNCTION IF EXISTS create_project_and_members();

-- 3. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
ALTER TABLE projects DISABLE ROW LEVEL SECURITY;
ALTER TABLE project_members DISABLE ROW LEVEL SECURITY;

-- 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
-- –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ projects –∏–º–µ–µ—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
DO $$
BEGIN
  -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'projects' AND column_name = 'user_id'
  ) THEN
    ALTER TABLE projects ADD COLUMN user_id UUID REFERENCES auth.users(id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'projects' AND column_name = 'status'
  ) THEN
    ALTER TABLE projects ADD COLUMN status TEXT DEFAULT 'active';
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'projects' AND column_name = 'created_at'
  ) THEN
    ALTER TABLE projects ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'projects' AND column_name = 'updated_at'
  ) THEN
    ALTER TABLE projects ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
  END IF;
END $$;

-- 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É project_members –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
CREATE TABLE IF NOT EXISTS project_members (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  role TEXT NOT NULL DEFAULT 'member' CHECK (role IN ('owner', 'admin', 'member')),
  invited_by UUID REFERENCES auth.users(id),
  invited_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  joined_at TIMESTAMP WITH TIME ZONE,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'declined')),
  UNIQUE(project_id, user_id)
);

-- 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_id –µ—Å–ª–∏ –æ–Ω null)
UPDATE projects 
SET user_id = (
  SELECT id FROM auth.users 
  WHERE email = 'grigoryneupokoev@gmail.com' 
  LIMIT 1
)
WHERE user_id IS NULL;

-- 7. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
CREATE OR REPLACE FUNCTION create_project_and_members(
  p_name TEXT,
  p_description TEXT DEFAULT NULL,
  p_color TEXT DEFAULT '#3B82F6',
  p_icon TEXT DEFAULT 'üéØ'
)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_project_id UUID;
  current_user_id UUID;
  result JSON;
BEGIN
  -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  current_user_id := auth.uid();
  
  IF current_user_id IS NULL THEN
    RAISE EXCEPTION 'User must be authenticated';
  END IF;

  -- –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  INSERT INTO projects (
    name,
    description,
    color,
    icon,
    user_id,
    status,
    created_at,
    updated_at
  ) VALUES (
    p_name,
    p_description,
    p_color,
    p_icon,
    current_user_id,
    'active',
    NOW(),
    NOW()
  ) RETURNING projects.id INTO new_project_id;

  -- –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ project_members
  INSERT INTO project_members (
    project_id,
    user_id,
    role,
    status,
    joined_at
  ) VALUES (
    new_project_id,
    current_user_id,
    'owner',
    'accepted',
    NOW()
  );

  -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ JSON
  SELECT to_json(p.*) INTO result
  FROM projects p
  WHERE p.id = new_project_id;

  RETURN result;
END;
$$;

-- 8. –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
GRANT EXECUTE ON FUNCTION create_project_and_members TO authenticated;

-- 9. –í–∫–ª—é—á–∞–µ–º RLS –æ–±—Ä–∞—Ç–Ω–æ
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE project_members ENABLE ROW LEVEL SECURITY;

-- 10. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏
-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è projects
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'projects' AND policyname = 'Users can manage their own projects'
  ) THEN
    CREATE POLICY "Users can manage their own projects" ON projects
      FOR ALL USING (auth.uid() = user_id);
  END IF;
END $$;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è project_members - –ø—Ä–æ—Å—Ç—ã–µ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'project_members' AND policyname = 'Users can view project members'
  ) THEN
    CREATE POLICY "Users can view project members" ON project_members
      FOR SELECT USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'project_members' AND policyname = 'Users can create project members'
  ) THEN
    CREATE POLICY "Users can create project members" ON project_members
      FOR INSERT WITH CHECK (auth.uid() = user_id);
  END IF;
END $$;

-- 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
SELECT 'Database fixed successfully!' as status;
