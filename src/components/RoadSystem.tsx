import React, { useMemo } from 'react'
import * as THREE from 'three'
import { hexToWorldPosition, getNeighbors, hexDistance } from '../lib/hex-utils'

interface RoadSystemProps {
  links: Array<{
    id: string
    from_object_id: string
    to_object_id: string
    link_type: 'primary' | 'secondary'
    created_at: string
  }>
  zoneObjects: Array<{
    id: string
    q: number
    r: number
    object_type?: string
  }>
}

// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏ (0-5, –Ω–∞—á–∏–Ω–∞—è —Å –ø—Ä–∞–≤–æ–≥–æ –∏ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)
const HEX_DIRECTIONS = [
  [1, 0],   // 0: –ø—Ä–∞–≤–æ
  [1, -1],  // 1: –≤–µ—Ä—Ö-–ø—Ä–∞–≤–æ
  [0, -1],  // 2: –≤–µ—Ä—Ö-–ª–µ–≤–æ
  [-1, 0],  // 3: –ª–µ–≤–æ
  [-1, 1],  // 4: –Ω–∏–∑-–ª–µ–≤–æ
  [0, 1]    // 5: –Ω–∏–∑-–ø—Ä–∞–≤–æ
]

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –¥–ª—è —è—á–µ–π–∫–∏
const getCellSide = (fromQ: number, fromR: number, toQ: number, toR: number): number => {
  const deltaQ = toQ - fromQ
  const deltaR = toR - fromR
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  if (deltaQ > 0 && deltaR === 0) return 0      // –ø—Ä–∞–≤–æ
  if (deltaQ > 0 && deltaR < 0) return 1       // –≤–µ—Ä—Ö-–ø—Ä–∞–≤–æ
  if (deltaQ === 0 && deltaR < 0) return 2     // –≤–µ—Ä—Ö-–ª–µ–≤–æ
  if (deltaQ < 0 && deltaR === 0) return 3     // –ª–µ–≤–æ
  if (deltaQ < 0 && deltaR > 0) return 4       // –Ω–∏–∑-–ª–µ–≤–æ
  if (deltaQ === 0 && deltaR > 0) return 5     // –Ω–∏–∑-–ø—Ä–∞–≤–æ
  
  return 0 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
const createRoadSegment = (
  cellQ: number, 
  cellR: number, 
  entrySide: number, 
  exitSide: number,
  hexToWorldPosition: (q: number, r: number) => [number, number, number]
) => {
  const [cellX, , cellZ] = hexToWorldPosition(cellQ, cellR)
  
  // –ï—Å–ª–∏ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö - –ø—Ä—è–º–∞—è –¥–æ—Ä–æ–≥–∞
  if (Math.abs(entrySide - exitSide) === 3) {
    const angle = (entrySide * Math.PI) / 3
    return {
      type: 'straight',
      position: [cellX, 0.02, cellZ],
      rotation: [0, angle, 0],
      length: 0.8
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–≥–∏–± - —Å–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø—Ä—è–º—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ–¥ —É–≥–ª–æ–º
  const entryAngle = (entrySide * Math.PI) / 3
  const exitAngle = (exitSide * Math.PI) / 3
  
  return {
    type: 'corner',
    position: [cellX, 0.02, cellZ],
    entryAngle,
    exitAngle,
    length: 0.4
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä—è–º–æ–π –¥–æ—Ä–æ–≥–∏
const StraightRoad: React.FC<{
  position: [number, number, number]
  rotation: [number, number, number]
  length: number
  linkType: 'primary' | 'secondary'
}> = ({ position, rotation, length, linkType }) => {
  const roadColor = linkType === 'primary' ? '#4a4a4a' : '#6a6a6a'
  const roadWidth = linkType === 'primary' ? 0.4 : 0.3
  
  return (
    <group position={position} rotation={rotation}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Ä–æ–≥–∞ */}
      <mesh>
        <planeGeometry args={[length, roadWidth]} />
        <meshStandardMaterial 
          color={roadColor}
          roughness={0.8}
          metalness={0.1}
        />
      </mesh>
      
      {/* –ë–µ–ª—ã–µ –ø–æ–ª–æ—Å—ã */}
      <mesh position={[0, 0.001, 0]}>
        <planeGeometry args={[length, 0.05]} />
        <meshStandardMaterial 
          color="#ffffff"
          roughness={0.3}
          metalness={0.0}
        />
      </mesh>
    </group>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≥–ª–æ–≤–æ–π –¥–æ—Ä–æ–≥–∏ (–¥–≤–∞ –ø—Ä—è–º—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞)
const CornerRoad: React.FC<{
  position: [number, number, number]
  entryAngle: number
  exitAngle: number
  length: number
  linkType: 'primary' | 'secondary'
}> = ({ position, entryAngle, exitAngle, length, linkType }) => {
  const roadColor = linkType === 'primary' ? '#4a4a4a' : '#6a6a6a'
  const roadWidth = linkType === 'primary' ? 0.4 : 0.3
  
  return (
    <group position={position}>
      {/* –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç (–≤—Ö–æ–¥) */}
      <group rotation={[0, entryAngle, 0]}>
        <mesh>
          <planeGeometry args={[length, roadWidth]} />
          <meshStandardMaterial 
            color={roadColor}
            roughness={0.8}
            metalness={0.1}
          />
        </mesh>
        <mesh position={[0, 0.001, 0]}>
          <planeGeometry args={[length, 0.05]} />
          <meshStandardMaterial 
            color="#ffffff"
            roughness={0.3}
            metalness={0.0}
          />
        </mesh>
      </group>
      
      {/* –í—Ç–æ—Ä–æ–π —Å–µ–≥–º–µ–Ω—Ç (–≤—ã—Ö–æ–¥) */}
      <group rotation={[0, exitAngle, 0]}>
        <mesh>
          <planeGeometry args={[length, roadWidth]} />
          <meshStandardMaterial 
            color={roadColor}
            roughness={0.8}
            metalness={0.1}
          />
        </mesh>
        <mesh position={[0, 0.001, 0]}>
          <planeGeometry args={[length, 0.05]} />
          <meshStandardMaterial 
            color="#ffffff"
            roughness={0.3}
            metalness={0.0}
          />
        </mesh>
      </group>
    </group>
  )
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const RoadSystem: React.FC<RoadSystemProps> = ({ links, zoneObjects }) => {
  const roadSegments = useMemo(() => {
    const segments: Array<{
      id: string
      cellQ: number
      cellR: number
      entrySide: number
      exitSide: number
      linkType: 'primary' | 'secondary'
      segmentData: any
    }> = []
    
    links.forEach(link => {
      const fromObject = zoneObjects.find(obj => obj.id === link.from_object_id)
      const toObject = zoneObjects.find(obj => obj.id === link.to_object_id)
      
      if (!fromObject || !toObject) {
        console.log('üîó RoadSystem: Objects not found for link:', link.id, { fromObject, toObject })
        return
      }
      
      console.log('üîó RoadSystem: Creating road between objects:', {
        from: { id: fromObject.id, q: fromObject.q, r: fromObject.r },
        to: { id: toObject.id, q: toObject.q, r: toObject.r }
      })
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
      const path = findPathBetweenObjects(fromObject, toObject, zoneObjects)
      
      console.log('üîó RoadSystem: Path found:', path)
      
      if (path.length === 0) {
        console.log('üîó RoadSystem: No path found between objects')
        return
      }
      
      // –°–æ–∑–¥–∞–µ–º –¥–æ—Ä–æ–∂–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –≤ –ø—É—Ç–∏
      for (let i = 0; i < path.length; i++) {
        const cell = path[i]
        const prevCell = i > 0 ? path[i - 1] : null
        const nextCell = i < path.length - 1 ? path[i + 1] : null
        
        let entrySide = -1
        let exitSide = -1
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –≤—Ö–æ–¥–∞
        if (prevCell) {
          entrySide = getCellSide(prevCell.q, prevCell.r, cell.q, cell.r)
        } else {
          // –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ - –≤—Ö–æ–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –æ–±—ä–µ–∫—Ç–∞
          entrySide = getCellSide(fromObject.q, fromObject.r, cell.q, cell.r)
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –≤—ã—Ö–æ–¥–∞
        if (nextCell) {
          exitSide = getCellSide(cell.q, cell.r, nextCell.q, nextCell.r)
        } else {
          // –ü–æ—Å–ª–µ–¥–Ω—è—è —è—á–µ–π–∫–∞ - –≤—ã—Ö–æ–¥ –≤ —Å—Ç–æ—Ä–æ–Ω—É –æ–±—ä–µ–∫—Ç–∞
          exitSide = getCellSide(cell.q, cell.r, toObject.q, toObject.r)
        }
        
        console.log('üîó RoadSystem: Cell segment:', {
          cell: { q: cell.q, r: cell.r },
          entrySide,
          exitSide,
          isStraight: Math.abs(entrySide - exitSide) === 3
        })
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–æ—Ä–æ–≥–∏
        const segmentData = createRoadSegment(cell.q, cell.r, entrySide, exitSide, hexToWorldPosition)
        
        segments.push({
          id: `${link.id}-${cell.q}-${cell.r}`,
          cellQ: cell.q,
          cellR: cell.r,
          entrySide,
          exitSide,
          linkType: link.link_type,
          segmentData
        })
      }
    })
    
    console.log('üîó RoadSystem: Total segments created:', segments.length)
    return segments
  }, [links, zoneObjects])
  
  return (
    <group>
      {roadSegments.map(segment => (
        <group key={segment.id}>
          {segment.segmentData.type === 'straight' ? (
            <StraightRoad
              position={segment.segmentData.position}
              rotation={segment.segmentData.rotation}
              length={segment.segmentData.length}
              linkType={segment.linkType}
            />
          ) : (
            <CornerRoad
              position={segment.segmentData.position}
              entryAngle={segment.segmentData.entryAngle}
              exitAngle={segment.segmentData.exitAngle}
              length={segment.segmentData.length}
              linkType={segment.linkType}
            />
          )}
        </group>
      ))}
    </group>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
const findPathBetweenObjects = (
  fromObject: { q: number; r: number },
  toObject: { q: number; r: number },
  zoneObjects: Array<{ q: number; r: number }>
): Array<{ q: number; r: number }> => {
  const path: Array<{ q: number; r: number }> = []
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å–æ—Å–µ–¥–Ω–µ–π —è—á–µ–π–∫–∏ –æ—Ç –æ–±—ä–µ–∫—Ç–∞
  const fromNeighbors = getNeighbors(fromObject.q, fromObject.r)
  const toNeighbors = getNeighbors(toObject.q, toObject.r)
  
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏ –∫ —Ü–µ–ª–∏
  const fromNeighbor = fromNeighbors.reduce((closest, neighbor) => {
    const distance = hexDistance(neighbor[0], neighbor[1], toObject.q, toObject.r)
    const closestDistance = hexDistance(closest[0], closest[1], toObject.q, toObject.r)
    return distance < closestDistance ? neighbor : closest
  })
  
  const toNeighbor = toNeighbors.reduce((closest, neighbor) => {
    const distance = hexDistance(neighbor[0], neighbor[1], fromObject.q, fromObject.r)
    const closestDistance = hexDistance(closest[0], closest[1], fromObject.q, fromObject.r)
    return distance < closestDistance ? neighbor : closest
  })
  
  console.log('üîó findPathBetweenObjects: Neighbors found:', {
    fromNeighbor,
    toNeighbor,
    fromObject: { q: fromObject.q, r: fromObject.r },
    toObject: { q: toObject.q, r: toObject.r }
  })
  
  // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã —Å–æ—Å–µ–¥–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –¥–≤–µ —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
  if (hexDistance(fromObject.q, fromObject.r, toObject.q, toObject.r) === 1) {
    path.push({ q: fromNeighbor[0], r: fromNeighbor[1] })
    path.push({ q: toNeighbor[0], r: toNeighbor[1] })
    return path
  }
  
  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —è—á–µ–π–∫–∏
  const cellsBetween = getCellsBetween([fromNeighbor[0], fromNeighbor[1]], [toNeighbor[0], toNeighbor[1]])
  
  cellsBetween.forEach(([q, r]) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–º
    const isOccupied = zoneObjects.some(obj => obj.q === q && obj.r === r)
    if (!isOccupied) {
      path.push({ q, r })
    }
  })
  
  return path
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è—á–µ–µ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
const getCellsBetween = (start: [number, number], end: [number, number]): Array<[number, number]> => {
  const [startQ, startR] = start
  const [endQ, endR] = end
  
  const cells: Array<[number, number]> = []
  const deltaQ = endQ - startQ
  const deltaR = endR - startR
  const steps = Math.max(Math.abs(deltaQ), Math.abs(deltaR))
  
  if (steps === 0) {
    return [[startQ, startR]]
  }
  
  for (let i = 0; i <= steps; i++) {
    const t = i / steps
    const q = Math.round(startQ + deltaQ * t)
    const r = Math.round(startR + deltaR * t)
    cells.push([q, r])
  }
  
  return cells
}

export default RoadSystem
