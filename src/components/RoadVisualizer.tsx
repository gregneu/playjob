import React, { useRef, useMemo } from 'react'
import * as THREE from 'three'
import { hexToWorldPosition } from '../lib/hex-utils'

interface RoadVisualizerProps {
  links: Array<{
    id: string
    from_object_id: string
    to_object_id: string
    link_type: 'primary' | 'secondary'
    created_at: string
    from_object?: { id: string; q: number; r: number }
    to_object?: { id: string; q: number; r: number }
  }>
  hexToWorldPosition: (q: number, r: number) => [number, number, number]
  zoneObjects: Array<{
    id: string
    q: number
    r: number
  }>
}

const RoadVisualizer: React.FC<RoadVisualizerProps> = ({ links, hexToWorldPosition, zoneObjects }) => {
  console.log('üõ£Ô∏è RoadVisualizer render - links count:', links.length)
  console.log('üõ£Ô∏è RoadVisualizer render - links:', links)
  console.log('üõ£Ô∏è RoadVisualizer render - zoneObjects count:', zoneObjects.length)
  console.log('üõ£Ô∏è RoadVisualizer render - zoneObjects:', zoneObjects)
  
  return (
    <group>
      {links.map((link) => (
        <RoadPath 
          key={link.id} 
          link={link} 
          hexToWorldPosition={hexToWorldPosition} 
          zoneObjects={zoneObjects}
        />
      ))}
    </group>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Ä–æ–≥–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –æ–±—ä–µ–∫—Ç–∞–º–∏
const RoadPath: React.FC<{ 
  link: { 
    id: string; 
    from_object_id: string; 
    to_object_id: string; 
    link_type: 'primary' | 'secondary';
    from_object?: { id: string; q: number; r: number };
    to_object?: { id: string; q: number; r: number };
  }
  hexToWorldPosition: (q: number, r: number) => [number, number, number]
  zoneObjects: Array<{ id: string; q: number; r: number }>
}> = ({ link, hexToWorldPosition, zoneObjects }) => {
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤
  const fromObject = zoneObjects.find(obj => obj.id === link.from_object_id)
  const toObject = zoneObjects.find(obj => obj.id === link.to_object_id)
  
  console.log('üîó Looking for objects:', { fromId: link.from_object_id, toId: link.to_object_id })
  console.log('üîó Found objects:', { fromObject, toObject })
  
  if (!fromObject || !toObject) {
    console.warn('Road objects not found:', link.from_object_id, link.to_object_id)
    return null
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  if (typeof fromObject.q !== 'number' || typeof fromObject.r !== 'number' ||
      typeof toObject.q !== 'number' || typeof toObject.r !== 'number') {
    console.warn('Invalid coordinates for road:', fromObject, toObject)
    console.log('üîó Object coordinates:', { 
      from: { q: fromObject.q, r: fromObject.r, type: typeof fromObject.q }, 
      to: { q: toObject.q, r: toObject.r, type: typeof toObject.q } 
    })
    return null
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
  const [fromX, fromY, fromZ] = hexToWorldPosition(fromObject.q, fromObject.r)
  const [toX, toY, toZ] = hexToWorldPosition(toObject.q, toObject.r)
  
  console.log('üîó Creating road between:', { from: [fromX, fromY, fromZ], to: [toX, toY, toZ] })
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –¥–æ—Ä–æ–≥–∏ –∏ –µ—ë —Ä–∞–∑–º–µ—Ä—ã
  const centerX = (fromX + toX) / 2
  const centerZ = (fromZ + toZ) / 2
  const distance = Math.sqrt((toX - fromX) ** 2 + (toZ - fromZ) ** 2)
  const angle = Math.atan2(toZ - fromZ, toX - fromX)
  
  // –†–∞–∑–º–µ—Ä—ã –¥–æ—Ä–æ–≥–∏
  const roadWidth = 0.4  // –®–∏—Ä–∏–Ω–∞ –¥–æ—Ä–æ–≥–∏
  const roadLength = distance + 0.2  // –î–ª–∏–Ω–∞ –¥–æ—Ä–æ–≥–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
  
  return (
    <group position={[centerX, 0.05, centerZ]} rotation={[-Math.PI / 2, 0, angle]}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Ä–æ–≥–∞ */}
      <mesh>
        <planeGeometry args={[roadLength, roadWidth]} />
        <meshStandardMaterial 
          color="#4a4a4a"  // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –∞—Å—Ñ–∞–ª—å—Ç–∞
          roughness={0.8}  // –®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
          metalness={0.1}  // –ù–µ–±–æ–ª—å—à–∞—è –º–µ—Ç–∞–ª–ª–∏—á–Ω–æ—Å—Ç—å
        />
      </mesh>
      
      {/* –ë–µ–ª—ã–µ –ø–æ–ª–æ—Å—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ */}
      <mesh position={[0, 0.001, 0]}>
        <planeGeometry args={[roadLength, 0.05]} />
        <meshStandardMaterial 
          color="#ffffff"  // –ë–µ–ª—ã–π —Ü–≤–µ—Ç –ø–æ–ª–æ—Å
          roughness={0.3}
          metalness={0.0}
        />
      </mesh>
    </group>
  )
}

export default RoadVisualizer
