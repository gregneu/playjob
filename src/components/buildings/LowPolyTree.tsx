// src/components/buildings/LowPolyTree.tsx

import React, { useMemo, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';

interface LowPolyTreeProps {
  position?: [number, number, number];
  seed?: number;
}

export const LowPolyTree: React.FC<LowPolyTreeProps> = ({
  position = [0, 0, 0],
  seed = 1,
}) => {
  const groupRef = useRef<THREE.Group>(null);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Å–µ–≤–¥–æ-—Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const pseudoRandom = (value: number) => {
    const x = Math.sin(value * 12.9898 + seed * 78.233) * 43758.5453;
    return x - Math.floor(x);
  };
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ 15 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const treeIndex = Math.floor(pseudoRandom(1) * 15) + 1; // 1-15
  const treePath = `/models/trees/tree_${treeIndex.toString().padStart(2, '0')}.glb`;
  
  const { scene } = useGLTF(treePath);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
  const processedTree = useMemo(() => {
    if (!scene) {
      console.warn(`GLB Tree: Failed to load ${treePath}`);
      return null;
    }
    
    console.log(`üå≥ Selected tree ${treeIndex} from ${treePath} (seed: ${seed})`);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const clonedScene = scene.clone();
    
    // –ü—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∞–µ–º —Ç–µ–Ω–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ GLB
    clonedScene.traverse((child) => {
      if ((child as any).isMesh) {
        const mesh = child as any;
        mesh.castShadow = true;
        mesh.receiveShadow = true;
      }
    });
    
    return clonedScene;
  }, [scene, treeIndex, seed]);
  
  if (!processedTree) {
    return null;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
  const scaleVariation = 0.5 + pseudoRandom(5) * 0.6; // 0.5 - 1.1 (–±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ü–∏–π)
  const rotationVariation = pseudoRandom(6) * Math.PI * 2; // 0 - 2œÄ
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–∫–ª–æ–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
  const tiltX = (pseudoRandom(7) - 0.5) * 0.1; // ¬±5 –≥—Ä–∞–¥—É—Å–æ–≤
  const tiltZ = (pseudoRandom(8) - 0.5) * 0.1; // ¬±5 –≥—Ä–∞–¥—É—Å–æ–≤
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
  useFrame((state) => {
    if (groupRef.current) {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ seed
      const time = state.clock.elapsedTime;
      const windSpeed = 0.4 + pseudoRandom(9) * 0.3; // 0.4-0.7 —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)
      const windStrength = 0.01 + pseudoRandom(10) * 0.015; // 0.01-0.025 —Å–∏–ª–∞ –≤–µ—Ç—Ä–∞ (—Å–ª–∞–±–µ–µ)
      
      // –ü–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ (–æ—Å—å Z)
      const swayX = Math.sin(time * windSpeed + seed * 0.5) * windStrength;
      // –õ–µ–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–ø–µ—Ä–µ–¥-–Ω–∞–∑–∞–¥ (–æ—Å—å X)
      const swayZ = Math.sin(time * windSpeed * 0.7 + seed * 0.3) * windStrength * 0.5;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –≥—Ä—É–ø–ø–µ
      groupRef.current.rotation.x = tiltX + swayX;
      groupRef.current.rotation.z = tiltZ + swayZ;
    }
  });
  
  return (
    <group 
      ref={groupRef}
      position={position}
      scale={[scaleVariation, scaleVariation, scaleVariation]}
      rotation={[tiltX, rotationVariation, tiltZ]}
    >
      <primitive object={processedTree} />
    </group>
  );
};

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–µ—Ä–µ–≤—å–µ–≤
for (let i = 1; i <= 15; i++) {
  const treePath = `/models/trees/tree_${i.toString().padStart(2, '0')}.glb`;
  useGLTF.preload(treePath);
}