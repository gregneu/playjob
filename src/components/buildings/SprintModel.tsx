// src/components/buildings/SprintModel.tsx

import React, { useMemo } from 'react';
import { useGLTF } from '@react-three/drei';
import * as THREE from 'three';

interface SprintModelProps {
  color: string;
  seed?: number;
}

export const SprintModel: React.FC<SprintModelProps> = ({
  color,
  seed = 1,
}) => {
  const { scene } = useGLTF('/models/sprint.glb');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Å–µ–≤–¥–æ-—Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const pseudoRandom = (value: number) => {
    const x = Math.sin(value * 12.9898 + seed * 78.233) * 43758.5453;
    return x - Math.floor(x);
  };
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GLB –º–æ–¥–µ–ª—å
  const processedModel = useMemo(() => {
    if (!scene) {
      console.warn('GLB Sprint: Failed to load /models/sprint.glb');
      return null;
    }
    
    console.log(`üèîÔ∏è Loaded sprint model (seed: ${seed})`);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
    const clonedScene = scene.clone();
    
    // –ü—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∞–µ–º —Ç–µ–Ω–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ GLB
    clonedScene.traverse((child) => {
      if ((child as any).isMesh) {
        const mesh = child as any;
        mesh.castShadow = true;
        mesh.receiveShadow = true;
      }
    });
    
    return clonedScene;
  }, [scene, seed]);
  
  if (!processedModel) {
    return null;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
  const scaleVariation = (0.8 + pseudoRandom(5) * 0.4) / 3; // –£–º–µ–Ω—å—à–∞–µ–º –≤ 3 —Ä–∞–∑–∞: 0.27 - 0.4
  const rotationVariation = pseudoRandom(6) * Math.PI * 2; // 0 - 2œÄ
  
  return (
    <group 
      position={[0, 0, 0]}
      scale={[scaleVariation, scaleVariation, scaleVariation]}
      rotation={[0, rotationVariation, 0]}
    >
      <primitive object={processedModel} />
    </group>
  );
};

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
useGLTF.preload('/models/sprint.glb');
