import React from 'react'
import { useGLTF } from '@react-three/drei'
import { HEX_SIZE } from '../../types/building'
import { StylizedTree } from './StylizedTree'
import { FluffyTree } from './FluffyTree'
import { SprintModel } from './SprintModel'
import { LowPolyTree } from './LowPolyTree'
import { HubGLB } from '../HubGLB'

// –ü—Ä–æ—Å—Ç—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è
export const ZoneObjectComponent: React.FC<{
  type: 'mountain' | 'castle' | 'house' | 'garden' | 'factory' | 'helipad' | 'meet' | 'refinement' | 'task' | 'test' | 'tree' | 'fluffy_tree' | 'low_poly_tree'
  status?: 'open' | 'in_progress' | 'done'
  progress?: number
  seed?: number
  isDragTarget?: boolean
}> = ({ type, status = 'open', seed = 0, isDragTarget = false }) => {
  // –û—Ç–ª–∞–¥–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ isDragTarget –º–µ–Ω—è–µ—Ç—Å—è
  React.useEffect(() => {
    if (isDragTarget) {
      console.log('üü¢ ZoneObjectComponent: isDragTarget = true for type:', type)
    }
  }, [isDragTarget, type])
  
  // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∑–¥–∞–Ω–∏—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
  const baseSize = HEX_SIZE * 0.6
  
  // –¶–≤–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const statusColors = {
    open: type === 'mountain' ? '#8B8B8B' : 
          type === 'helipad' ? '#B0BEC5' : '#6B8E23',        // –°–µ—Ä—ã–π –¥–ª—è –≥–æ—Ä, —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è Development, –æ–ª–∏–≤–∫–æ–≤–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤
    in_progress: '#4ECDC4', // –ë–∏—Ä—é–∑–æ–≤—ã–π
    done: '#45B7D1'         // –°–∏–Ω–∏–π
  }
  
  const color = statusColors[status] || statusColors.open

  switch (type) {
    case 'mountain': // Sprint GLB –º–æ–¥–µ–ª—å
      return (
        <group position={[0, 0, 0]} scale={[baseSize * 1.0, baseSize * 1.0, baseSize * 1.0]}>
          <SprintModel 
            color={color}
            seed={seed}
          />
          {/* –£–±–∏—Ä–∞–µ–º –∑–µ–ª–µ–Ω—ã–π –±–æ–∫—Å –ø—Ä–∏ drag & drop */}
        </group>
      )
      
    case 'castle': // hub - Hub GLB model
      return (
        <group position={[0, 0, 0]} scale={[baseSize * 1.2, baseSize * 1.2, baseSize * 1.2]}>
          <HubGLB 
            position={[0, 0, 0]}
            rotationY={0}
            scale={1.0}
            fitDiameter={1.8}
          />
          {/* –£–±–∏—Ä–∞–µ–º –∑–µ–ª–µ–Ω—ã–π –±–æ–∫—Å –ø—Ä–∏ drag & drop */}
        </group>
      )
      
    case 'house': // meet - GLB –º–æ–¥–µ–ª—å meet.glb
      return <MeetModel color={color} baseSize={baseSize} />
      
    case 'garden': // refinement - GLB –º–æ–¥–µ–ª—å refinement.glb
      return <RefinementModel color={color} baseSize={baseSize} />
      
    case 'factory': // qa - GLB –º–æ–¥–µ–ª—å qa.glb
      return <QAModel color={color} baseSize={baseSize} />
      
    case 'helipad': // development - GLB –º–æ–¥–µ–ª—å Development.glb
      return <DevelopmentModel color={color} baseSize={baseSize} />
      
    case 'meet': // meet - GLB –º–æ–¥–µ–ª—å meet.glb
      return <MeetModel color={color} baseSize={baseSize} />
      
    case 'task': // –ó–∞–¥–∞—á–∞ - –ö—É–±
      return (
        <group position={[0, 0, 0]}>
          <mesh castShadow receiveShadow>
            <boxGeometry args={[baseSize * 0.6, baseSize * 0.6, baseSize * 0.6]} />
            <meshStandardMaterial color={color} />
          </mesh>
          {/* –£–±–∏—Ä–∞–µ–º –∑–µ–ª–µ–Ω—ã–π –±–æ–∫—Å –ø—Ä–∏ drag & drop */}
        </group>
      )
      
    case 'test': // –¢–µ—Å—Ç - –°—Ñ–µ—Ä–∞
      return (
        <group position={[0, 0, 0]}>
          <mesh castShadow receiveShadow>
            <sphereGeometry args={[baseSize * 0.4, 8, 6]} />
            <meshStandardMaterial color={color} />
          </mesh>
          {/* –£–±–∏—Ä–∞–µ–º –∑–µ–ª–µ–Ω—ã–π –±–æ–∫—Å –ø—Ä–∏ drag & drop */}
        </group>
      )
      
    case 'tree': // –î–µ—Ä–µ–≤–æ - —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ low-poly –¥–µ—Ä–µ–≤–æ
      return (
        <group position={[0, 0, 0]} scale={[baseSize * 0.7, baseSize * 0.7, baseSize * 0.7]}>
          <StylizedTree 
            color={color} 
            seed={seed || Math.random()}
          />
        </group>
      )
      
    case 'fluffy_tree': // –ü—ã—à–Ω–æ–µ –¥–µ—Ä–µ–≤–æ - —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —à–µ–π–¥–µ—Ä–∞–º–∏
      return (
        <group position={[0, 0, 0]} scale={[baseSize * 0.7, baseSize * 0.7, baseSize * 0.7]}>
          <FluffyTree 
            color={color}
          />
        </group>
      )
      
    case 'low_poly_tree': // Low-poly –¥–µ—Ä–µ–≤–æ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
      return (
        <group position={[0, 0, 0]} scale={[baseSize * 1.2, baseSize * 1.2, baseSize * 1.2]}>
          <LowPolyTree 
            seed={seed}
          />
        </group>
      )
      
    default:
      return null
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è GLB –º–æ–¥–µ–ª–∏ Development
const DevelopmentModel: React.FC<{ color: string; baseSize: number }> = ({ color, baseSize }) => {
  const { scene } = useGLTF('/models/Development.glb')
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –ë–ï–ó –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ GLB)
  const clonedScene = React.useMemo(() => {
    const cloned = scene.clone()
    cloned.traverse((child) => {
      if ((child as any).isMesh) {
        const mesh = child as any
        mesh.castShadow = true
        mesh.receiveShadow = true
        // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ GLB
      }
    })
    return cloned
  }, [scene])

  return (
    <group position={[0, 0, 0]} scale={[baseSize * 0.8, baseSize * 0.8, baseSize * 0.8]}>
      <primitive object={clonedScene} />
    </group>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è GLB –º–æ–¥–µ–ª–∏ Meet
const MeetModel: React.FC<{ color: string; baseSize: number }> = ({ color, baseSize }) => {
  const { scene } = useGLTF('/models/meet.glb')
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –ë–ï–ó –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ GLB)
  const clonedScene = React.useMemo(() => {
    const cloned = scene.clone()
    cloned.traverse((child) => {
      if ((child as any).isMesh) {
        const mesh = child as any
        mesh.castShadow = true
        mesh.receiveShadow = true
        // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ GLB
      }
    })
    return cloned
  }, [scene])

  return (
    <group position={[0, 0, 0]} scale={[baseSize * 0.225, baseSize * 0.225, baseSize * 0.225]}>
      <primitive object={clonedScene} />
    </group>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è GLB –º–æ–¥–µ–ª–∏ Refinement
const RefinementModel: React.FC<{ color: string; baseSize: number }> = ({ color, baseSize }) => {
  const { scene } = useGLTF('/models/refinement.glb')
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –ë–ï–ó –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ GLB)
  const clonedScene = React.useMemo(() => {
    const cloned = scene.clone()
    cloned.traverse((child) => {
      if ((child as any).isMesh) {
        const mesh = child as any
        mesh.castShadow = true
        mesh.receiveShadow = true
        // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ GLB
      }
    })
    return cloned
  }, [scene])

  return (
    <group position={[0, 0.1, 0]} scale={[baseSize * 0.8, baseSize * 0.8, baseSize * 0.8]}>
      <primitive object={clonedScene} />
    </group>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è GLB –º–æ–¥–µ–ª–∏ QA
const QAModel: React.FC<{ color: string; baseSize: number }> = ({ color, baseSize }) => {
  const { scene } = useGLTF('/models/qa.glb')
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –ë–ï–ó –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ GLB)
  const clonedScene = React.useMemo(() => {
    const cloned = scene.clone()
    cloned.traverse((child) => {
      if ((child as any).isMesh) {
        const mesh = child as any
        mesh.castShadow = true
        mesh.receiveShadow = true
        // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ GLB
      }
    })
    return cloned
  }, [scene])

  return (
    <group position={[0, 0.1, 0]} scale={[baseSize * 0.4, baseSize * 0.4, baseSize * 0.4]}>
      <primitive object={clonedScene} />
    </group>
  )
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º GLB –º–æ–¥–µ–ª–∏
useGLTF.preload('/models/Development.glb')
useGLTF.preload('/models/meet.glb')
useGLTF.preload('/models/refinement.glb')
useGLTF.preload('/models/qa.glb') 