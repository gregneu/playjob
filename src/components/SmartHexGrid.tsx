import React, { useMemo } from 'react'
import { UnifiedHexCell, HexCellState } from './UnifiedHexCell'
import { ZoneObjectComponent } from './buildings/BuildingComponents'
import * as THREE from 'three'
// import { HexFillComponent } from './buildings/HexFillComponent'
import { hexToWorldPosition } from '../lib/hex-utils'
// import { useZoneHexFilling } from '../hooks/useZoneHexFilling'
import type { BuildingNotifications } from '../types/notifications'

type MeetingParticipantInfo = {
  id: string
  name: string
  avatarUrl?: string
  avatarConfig?: any
  userId?: string
}

interface HexGridProps {
  zones: Array<{
    id: string
    name: string
    color: string
    center: [number, number]
    cells: Array<[number, number]>
  }>
  registerHoverTarget?: (key: string, mesh: THREE.Object3D) => void
  unregisterHoverTarget?: (key: string) => void
  zoneObjects?: Array<{
    id: string
    q: number
    r: number
    object_type: string
    [key: string]: any
  }>
  // –î–∞–Ω–Ω—ã–µ –∑–æ–Ω –∏ —è—á–µ–µ–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  zoneData?: Array<{
    id: string
    name: string
  }>
  zoneCellData?: Array<{
    zone_id: string
    q: number
    r: number
  }>
  ticketsByZoneObject?: Record<string, any[]>
  notificationsByBuilding?: Record<string, BuildingNotifications>
  buildingHasUnreadMentions?: (buildingId: string, ticketsByBuilding: any[]) => boolean
  // –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  isZoneMode?: boolean
  hoveredCell?: [number, number] | null
  hoveredCellType?: string | null
  onCellClick?: (q: number, r: number, mousePosition?: { x: number; y: number }) => void
  onCellHover?: (q: number, r: number) => void
  onCellLeave?: (q: number, r: number) => void
  showZoneNames?: boolean
  // Drag & drop props
  isDraggingTicket?: boolean
  candidateCenterCell?: [number, number] | null
  hoveredCellDuringDrag?: [number, number] | null
  activeSprintObjectId?: string | null
  activeSprintProgress?: { total: number; done: number } | null
  sprintProgressMap?: Record<string, { total: number; done: number }>
  energyPulseMap?: Record<string, { type: 'source' | 'target'; key: string; color: string }>
  badgeAnimationMap?: Record<string, { type: 'gain' | 'lose'; key: string }>
  meetingParticipantsByBuildingId?: Record<string, MeetingParticipantInfo[]>
}

export const SmartHexGrid: React.FC<HexGridProps> = ({ 
  zones, 
  zoneObjects = [],
  zoneData = [],
  zoneCellData = [],
  ticketsByZoneObject = {},
  notificationsByBuilding = {},
  buildingHasUnreadMentions,
  isZoneMode = false, 
  hoveredCell, 
  hoveredCellType, 
  onCellClick, 
  onCellHover, 
  onCellLeave,
  showZoneNames = true,
  isDraggingTicket = false,
  candidateCenterCell = null,
  hoveredCellDuringDrag = null,
  registerHoverTarget,
  unregisterHoverTarget,
  activeSprintObjectId = null,
  activeSprintProgress = null,
  sprintProgressMap = {},
  energyPulseMap,
  badgeAnimationMap,
  meetingParticipantsByBuildingId
}) => {
  const hexSize = 2.0

  // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ-—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
  const deterministicRandom = (seed: number) => {
    let x = Math.sin(seed) * 10000;
    return x - Math.floor(x);
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥–µ–∫—Å–æ–≤ - –û–¢–ö–õ–Æ–ß–ï–ù–û
  // const { zoneFillings, getHexFillType, isHexFilled, generateJSON } = useZoneHexFilling({
  //   zones: zoneData.length > 0 ? zoneData : zones.map(z => ({ id: z.id, name: z.name })),
  //   zoneCells: zoneCellData.length > 0 ? zoneCellData : zones.flatMap(z => 
  //     z.cells.map(([q, r]) => ({ zone_id: z.id, q, r }))
  //   ),
  //   seed: 42
  // })

  // –í—ã–≤–æ–¥–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–û
  // React.useEffect(() => {
  //   if (zoneFillings.length > 0) {
  //     console.log('üå≤ Zone Hex Filling Result:')
  //     console.log(generateJSON())
  //   }
  // }, [zoneFillings, generateJSON])




  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –∏–∑ –≤—Å–µ—Ö –∑–æ–Ω
  const zoneCells = useMemo(() => {
    const cells: Array<{ q: number; r: number; zoneId: string; zoneColor: string; isCenter: boolean }> = []
    
    zones.forEach(zone => {
      zone.cells.forEach(([q, r]) => {
        const isCenter = q === zone.center[0] && r === zone.center[1]
        cells.push({ q, r, zoneId: zone.id, zoneColor: zone.color, isCenter })
      })
    })
    
    return cells
  }, [zones])

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —è—á–µ–π–∫–∏)
  const interactiveCells = useMemo(() => {
    const cells: Array<{ q: number; r: number; state: HexCellState; cellType: string }> = []
    const addedCells = new Set<string>() // –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —è—á–µ–π–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    const centerKey = '0,0'
    if (!addedCells.has(centerKey)) {
      cells.push({ q: 0, r: 0, state: HexCellState.DEFAULT, cellType: 'project-center' })
      addedCells.add(centerKey)
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –∑–æ–Ω
    zoneCells.forEach(cell => {
      const key = `${cell.q},${cell.r}`
      if (!addedCells.has(key)) {
        cells.push({ 
          q: cell.q, 
          r: cell.r, 
          state: HexCellState.ZONE, 
          cellType: cell.isCenter ? 'project-center' : 'building-slot' 
        })
        addedCells.add(key)
      }
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∑–æ–Ω)
    if (isZoneMode) {
      zoneCells.forEach(cell => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ –∑–æ–Ω—ã
        const neighbors = [
          [cell.q + 1, cell.r], [cell.q + 1, cell.r - 1], [cell.q, cell.r - 1],
          [cell.q - 1, cell.r], [cell.q - 1, cell.r + 1], [cell.q, cell.r + 1]
        ]
        neighbors.forEach(([nq, nr]) => {
          const key = `${nq},${nr}`
          if (!addedCells.has(key)) {
            cells.push({ q: nq, r: nr, state: HexCellState.EMPTY, cellType: 'building-slot' })
            addedCells.add(key)
          }
        })
      })
    }
    
    return cells
  }, [zoneCells, isZoneMode])

  // Removed excessive logging - this was called on every render

  return (
    <group>
      {interactiveCells.map((cell) => {
        const isHovered = (hoveredCell && hoveredCell[0] === cell.q && hoveredCell[1] === cell.r) || 
                         (hoveredCellDuringDrag && hoveredCellDuringDrag[0] === cell.q && hoveredCellDuringDrag[1] === cell.r)
        const showPlusIcon = Boolean(isZoneMode && isHovered && hoveredCellType === 'empty')
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —É—á–µ—Ç–æ–º hover
        const finalState = isHovered ? HexCellState.HOVER : cell.state
        
        // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏
        if (cell.q === 0 && cell.r === 0) {
          // Removed excessive logging - this was called on every render for central cell
        }
        
        // –û—Ç–ª–∞–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if (cell.q === 0 && cell.r === 0) {
          // Removed excessive logging - this was called on every render for central cell
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —è—á–µ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–æ–º –∑–æ–Ω—ã
        const zoneCell = zoneCells.find(zc => zc.q === cell.q && zc.r === cell.r)
        const isCenter = zoneCell?.isCenter || false
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–æ–Ω—É –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
        const zone = zones.find(z => z.id === zoneCell?.zoneId)
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–¥–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
        // –ó–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–Ω—Ç—Ä–µ –∑–æ–Ω—ã
        const building = isCenter && zone ? zoneObjects.find(obj => obj.zone_id === zone.id) : null

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–∞–º–µ–Ω—å –Ω–∞ —ç—Ç–æ–π —è—á–µ–π–∫–µ
        const shouldShowStone = Boolean(
          cell.state === 'zone' && // –Ø—á–µ–π–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–æ–Ω–µ
          !isCenter && // –ù–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —è—á–µ–π–∫–∞ –∑–æ–Ω—ã
          !building && // –ù–µ—Ç –∑–¥–∞–Ω–∏—è –Ω–∞ —è—á–µ–π–∫–µ
          zone // –ï—Å—Ç—å –∑–æ–Ω–∞
        )
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed –¥–ª—è –∫–∞–º–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∑–æ–Ω—ã
        const stoneSeed = shouldShowStone ? 
          Math.abs((cell.q * 2654435761) ^ (cell.r * 1597334677) ^ (zone?.id?.charCodeAt(0) || 0)) : 0

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–º–µ–Ω—å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –¥–ª—è —è—á–µ–µ–∫ –∑–æ–Ω—ã
        const stoneProbability = shouldShowStone ? (stoneSeed % 100) / 100 : 0
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∫–∞–º–µ–Ω—å –≤ –∑–æ–Ω–µ: –≤—ã–±–∏—Ä–∞–µ–º —è—á–µ–π–∫—É —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º seed
        let finalShouldShowStone = shouldShowStone && stoneProbability < 0.3
        let stoneCount = 1
        
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞–º–Ω—è–º, –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        const shouldShowTrees = Boolean(
          cell.state === 'zone' && // –Ø—á–µ–π–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–æ–Ω–µ
          !isCenter && // –ù–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —è—á–µ–π–∫–∞ –∑–æ–Ω—ã
          !building && // –ù–µ—Ç –∑–¥–∞–Ω–∏—è –Ω–∞ —è—á–µ–π–∫–µ
          zone // –ï—Å—Ç—å –∑–æ–Ω–∞
        )
        
        const treeSeed = shouldShowTrees ? 
          Math.abs((cell.q * 2654435761) ^ (cell.r * 1597334677) ^ (zone?.id?.charCodeAt(0) || 0)) + 10000 : 0
        
        const treeProbability = shouldShowTrees ? (treeSeed % 100) / 100 : 0
        let finalShouldShowTrees = shouldShowTrees && treeProbability < 0.25 // 25% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤
        let treeCount = 1
        
        if (zone && shouldShowStone) {
          // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —è—á–µ–π–∫–∏ –∑–æ–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ seed
          const zoneCellsForZone = zone.cells
          const zoneCellSeeds = zoneCellsForZone.map(([q, r]) => 
            Math.abs((q * 2654435761) ^ (r * 1597334677) ^ (zone.id.charCodeAt(0) || 0))
          )
          const minSeed = Math.min(...zoneCellSeeds)
          const currentCellSeed = Math.abs((cell.q * 2654435761) ^ (cell.r * 1597334677) ^ (zone.id.charCodeAt(0) || 0))
          
          // –ï—Å–ª–∏ —ç—Ç–æ —è—á–µ–π–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º seed, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–∞–º–µ–Ω—å
          if (currentCellSeed === minSeed) {
            finalShouldShowStone = true
            // –î–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –¥–µ–ª–∞–µ–º –±–æ–ª—å—à–µ –∫–∞–º–Ω–µ–π (2-5)
            stoneCount = 2 + Math.floor(stoneSeed % 4)
          } else if (finalShouldShowStone) {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —è—á–µ–µ–∫ 1-3 –∫–∞–º–Ω—è
            stoneCount = 1 + Math.floor(stoneSeed % 3)
          }
        }
        
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤
        if (zone && shouldShowTrees) {
          const zoneCellsForZone = zone.cells
          const zoneCellSeeds = zoneCellsForZone.map(([q, r]) => 
            Math.abs((q * 2654435761) ^ (r * 1597334677) ^ (zone.id.charCodeAt(0) || 0)) + 10000
          )
          const minSeed = Math.min(...zoneCellSeeds)
          const currentCellSeed = Math.abs((cell.q * 2654435761) ^ (cell.r * 1597334677) ^ (zone.id.charCodeAt(0) || 0)) + 10000
          
          // –ï—Å–ª–∏ —ç—Ç–æ —è—á–µ–π–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º seed –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤—å—è
          if (currentCellSeed === minSeed) {
            finalShouldShowTrees = true
            // –î–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –¥–µ–ª–∞–µ–º 2-3 –¥–µ—Ä–µ–≤–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º)
            treeCount = 2 + Math.floor(treeSeed % 2) // 2-3 –¥–µ—Ä–µ–≤–∞
          } else if (finalShouldShowTrees) {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —è—á–µ–µ–∫ 1-2 –¥–µ—Ä–µ–≤–∞
            treeCount = 1 + Math.floor(treeSeed % 2) // 1-2 –¥–µ—Ä–µ–≤–∞
          }
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –≤ –∑–æ–Ω–µ
        // –¢–∏–∫–µ—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ ID –∑–¥–∞–Ω–∏—è (zoneObject), –∞ –Ω–µ –ø–æ ID –∑–æ–Ω—ã
        const zoneTicketCount = building ? (ticketsByZoneObject[building.id] || []).length : 0

        const isSprintBuilding = Boolean(building && typeof building.object_type === 'string' && ['sprint', 'mountain'].includes(building.object_type.toLowerCase()))
        const progressEntry = isSprintBuilding && building ? (sprintProgressMap[building.id] ?? { total: 0, done: 0 }) : null
        const sprintProgressForCell = isSprintBuilding
          ? (building?.id && building.id === activeSprintObjectId && activeSprintProgress
              ? activeSprintProgress
              : progressEntry)
          : null
        
        // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–æ–≤
        if (isCenter && zone) {
          console.log('üîç SmartHexGrid ticket debug:', {
            zoneId: zone.id,
            zoneName: zone.name,
            buildingId: building?.id,
            buildingTitle: building?.title,
            ticketsByZone: ticketsByZoneObject[zone.id] || [],
            ticketsByBuilding: building ? (ticketsByZoneObject[building.id] || []) : [],
            zoneTicketCount,
            allTicketKeys: Object.keys(ticketsByZoneObject)
          })
        }

        // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∫–∞–º–Ω–µ–π –∏ –¥–µ—Ä–µ–≤—å–µ–≤
        if (finalShouldShowStone) {
          console.log(`ü™® SmartHexGrid: ${stoneCount} –∫–∞–º–Ω–µ–π —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ —è—á–µ–π–∫–µ [${cell.q}, ${cell.r}] –≤ –∑–æ–Ω–µ "${zone?.name}"`)
        }
        if (finalShouldShowTrees) {
          console.log(`üå≥ SmartHexGrid: ${treeCount} –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ —è—á–µ–π–∫–µ [${cell.q}, ${cell.r}] –≤ –∑–æ–Ω–µ "${zone?.name}"`)
        }

        const buildingId = building?.id ?? null
        const pulse = buildingId && energyPulseMap ? energyPulseMap[buildingId] : undefined
        const badgeAnim = buildingId && badgeAnimationMap ? badgeAnimationMap[buildingId] : undefined
        const buildingNotifications = buildingId ? notificationsByBuilding[buildingId] ?? null : null
        const buildingTickets = buildingId ? (ticketsByZoneObject[buildingId] || []) : []
        const mentionNotificationCount = Array.isArray(buildingNotifications?.notifications)
          ? buildingNotifications.notifications.filter((notification) => notification.type === 'comment_mention').length
          : 0
        const commentCountFromNotifications = typeof buildingNotifications?.commentCount === 'number'
          ? buildingNotifications.commentCount
          : 0
        const totalCommentCount = commentCountFromNotifications > 0
          ? commentCountFromNotifications
          : mentionNotificationCount
        const hasUnreadMentions = buildingId && buildingTickets.length > 0 && buildingHasUnreadMentions
          ? buildingHasUnreadMentions(buildingId, buildingTickets)
          : false
        const hasMentions = Boolean(
          typeof buildingNotifications?.hasCommentMentions === 'boolean'
            ? buildingNotifications.hasCommentMentions
            : mentionNotificationCount > 0
        ) || hasUnreadMentions || totalCommentCount > 0
        const assignmentCount = buildingNotifications?.assignmentCount ??
          (Array.isArray(buildingNotifications?.notifications)
            ? buildingNotifications.notifications.filter((notification) => notification.type === 'assignment').length
            : 0)
        const meetingParticipantsForBuilding =
          building && meetingParticipantsByBuildingId
            ? meetingParticipantsByBuildingId[building.id] || []
            : []

        return (
          <group key={`smart-${cell.q}-${cell.r}-${cell.state}-${cell.cellType}`}>
            <UnifiedHexCell
              q={cell.q}
              r={cell.r}
              state={finalState}
              zoneColor={cell.state === 'zone' ? zoneCells.find(zc => zc.q === cell.q && zc.r === cell.r)?.zoneColor : undefined}
              isZoneCenter={isCenter}
              cellType={cell.cellType as any}
              onClick={(q, r, mousePosition) => {
                // Removed excessive logging - this was called on every cell click
                if (onCellClick) {
                  onCellClick(q, r, mousePosition)
                }
              }}
              onPointerEnter={(q, r) => {
                // Removed excessive logging - this was called on every cell hover
                if (onCellHover) {
                  onCellHover(q, r)
                }
              }}
              onPointerLeave={(q, r) => {
                // Removed excessive logging - this was called on every cell leave
                if (onCellLeave) {
                  onCellLeave(q, r)
                }
              }}
              showPlusIcon={showPlusIcon}
              hexSize={hexSize}
              zoneObject={building ? {
                ...building,
                type: building.object_type as any,
                title: building.object_type,
                status: 'open',
                priority: 'medium'
              } : null}
              zoneName={showZoneNames ? (building?.title || zone?.name) : undefined}
              ticketCount={zoneTicketCount}
              commentCount={totalCommentCount}
              hasMentions={hasMentions}
              assignmentCount={assignmentCount}
              showStone={finalShouldShowStone}
              stoneSeed={stoneSeed}
              stoneCount={stoneCount}
              showTrees={finalShouldShowTrees}
              treeSeed={treeSeed}
              treeCount={treeCount}
              registerHoverTarget={registerHoverTarget}
              unregisterHoverTarget={unregisterHoverTarget}
              energyPulse={pulse ? pulse.type : null}
              energyPulseKey={pulse?.key}
              energyPulseColor={pulse?.color ?? null}
              ticketBadgeAnimation={badgeAnim?.type ?? null}
              ticketBadgeAnimationKey={badgeAnim?.key}
              isDragTarget={(() => {
                // Drag target —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –ò —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–æ–º –∑–æ–Ω—ã –ò –∏–¥–µ—Ç drag –æ–ø–µ—Ä–∞—Ü–∏—è
                const isHovered = hoveredCellDuringDrag && 
                  hoveredCellDuringDrag[0] === cell.q && 
                  hoveredCellDuringDrag[1] === cell.r
                const result = Boolean(isDraggingTicket && isHovered && isCenter)
                if (result) {
                  console.log('üü¢ SmartHexGrid: isDragTarget = true for cell [', cell.q, ',', cell.r, ']', {
                    isDraggingTicket,
                    isHovered,
                    isCenter,
                    currentCell: [cell.q, cell.r],
                    hoveredCellDuringDrag
                  })
                }
                return result
              })()}
              meetingParticipants={meetingParticipantsForBuilding}
              onMeetingClick={
                meetingParticipantsForBuilding.length > 0 && onCellClick
                  ? () => onCellClick(cell.q, cell.r)
                  : undefined
              }
              sprintProgress={sprintProgressForCell || undefined}
            />
            
            {/* –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –±–µ–π–¥–∂ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫ —É–±—Ä–∞–Ω */}
          </group>
        )
      })}

      {/* –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥–µ–∫—Å–æ–≤ –æ–±—ä–µ–∫—Ç–∞–º–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–ê */}
      {/* {zones.map((zone) => {
        return zone.cells.map(([q, r]) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —è—á–µ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–æ–º –∑–æ–Ω—ã (—Ü–µ–Ω—Ç—Ä –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è)
          const isCenter = q === zone.center[0] && r === zone.center[1]
          if (isCenter) return null

          // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –≥–µ–∫—Å–∞
          const fillType = getHexFillType(zone.id, q, r)
          if (!fillType) return null

          // –ü–æ–ª—É—á–∞–µ–º –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–µ–∫—Å–∞
          const [x, , z] = hexToWorldPosition(q, r, hexSize)
          
          // –°–æ–∑–¥–∞–µ–º seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
          const hexSeed = q * 1000 + r * 100 + zone.id.length

          return (
            <group key={`hex-fill-${zone.id}-${q}-${r}`} position={[x, 0, z]}>
              <HexFillComponent 
                fillType={fillType}
                seed={hexSeed}
              />
            </group>
          )
        })
      }).flat().filter(Boolean)} */}

      {/* Zone Objects —Ç–µ–ø–µ—Ä—å —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –≤ UnifiedHexCell */}
    </group>
  )
}

export default SmartHexGrid
