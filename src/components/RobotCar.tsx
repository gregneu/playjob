import React, { useRef, useMemo } from 'react'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'

interface RobotCarProps {
  position?: [number, number, number]
  color?: string
  isMoving?: boolean
  isBlinking?: boolean
  scale?: number
  targetPosition?: [number, number, number]
}

export const RobotCar: React.FC<RobotCarProps> = ({ 
  position = [0, 0, 0], 
  color = '#ffffff',
  isMoving = false,
  isBlinking = true,
  scale = 1,
  targetPosition
}) => {
  const groupRef = useRef<THREE.Group>(null)
  const leftEyeRef = useRef<THREE.Mesh>(null)
  const rightEyeRef = useRef<THREE.Mesh>(null)
  const leftWheelRef = useRef<THREE.Mesh>(null)
  const rightWheelRef = useRef<THREE.Mesh>(null)

  // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –¥–ª—è –∫—É–∑–æ–≤–∞
  const roundedBoxGeometry = useMemo(() => {
    const geometry = new THREE.BoxGeometry(0.5, 0.4, 0.4, 8, 6, 8)
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –≤–µ—Ä—à–∏–Ω–∞–º
    const positionAttribute = geometry.getAttribute('position')
    const positions = positionAttribute.array as Float32Array
    
    for (let i = 0; i < positions.length; i += 3) {
      const x = positions[i]
      const y = positions[i + 1]
      const z = positions[i + 2]
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ [-1, 1]
      const nx = x / 0.25
      const ny = y / 0.2
      const nz = z / 0.2
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ
      const radius = 0.1
      const length = Math.sqrt(nx * nx + ny * ny + nz * nz)
      
      if (length > 1) {
        const factor = 1 + radius * (1 - 1 / length)
        positions[i] = x * factor
        positions[i + 1] = y * factor
        positions[i + 2] = z * factor
      }
    }
    
    positionAttribute.needsUpdate = true
    geometry.computeVertexNormals()
    
    return geometry
  }, [])

  // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞
  const roundedScreenGeometry = useMemo(() => {
    const geometry = new THREE.BoxGeometry(0.38, 0.35, 0.02, 6, 4, 2)
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –≤–µ—Ä—à–∏–Ω–∞–º
    const positionAttribute = geometry.getAttribute('position')
    const positions = positionAttribute.array as Float32Array
    
    for (let i = 0; i < positions.length; i += 3) {
      const x = positions[i]
      const y = positions[i + 1]
      const z = positions[i + 2]
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ [-1, 1]
      const nx = x / 0.225
      const ny = y / 0.175
      // const nz = z / 0.01 // nz is calculated but not used in current implementation
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ
      const radius = 0.35
      const length = Math.sqrt(nx * nx + ny * ny)
      
      if (length > 1) {
        const factor = 1 + radius * (1 - 1 / length)
        positions[i] = x * factor
        positions[i + 1] = y * factor
        positions[i + 2] = z
      }
    }
    
    positionAttribute.needsUpdate = true
    geometry.computeVertexNormals()
    
    return geometry
  }, [])
  
  useFrame((state) => {
    if (!groupRef.current) return
    
    const time = state.clock.getElapsedTime()
    
    // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if (targetPosition) {
      const currentPos = groupRef.current.position
      const target = new THREE.Vector3(...targetPosition)
      const distance = currentPos.distanceTo(target)
      
      if (distance > 0.01) {
        // –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        currentPos.lerp(target, 0.05)
        
        // –ü–æ–≤–æ—Ä–æ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥–≤–∏–∂–µ–Ω–∏—è
        const direction = target.clone().sub(currentPos).normalize()
        if (direction.length() > 0.01) {
          const targetRotation = Math.atan2(direction.x, direction.z)
          groupRef.current.rotation.y = THREE.MathUtils.lerp(groupRef.current.rotation.y, targetRotation, 0.1)
        }
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤)
        if (Math.floor(time * 10) % 60 === 0) {
          console.log(`üöó Moving: distance=${distance.toFixed(3)}, current=[${currentPos.x.toFixed(2)}, ${currentPos.z.toFixed(2)}], target=[${target.x.toFixed(2)}, ${target.z.toFixed(2)}]`)
        }
      } else {
        // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
        if (Math.floor(time * 10) % 60 === 0) {
          console.log(`üöó Reached target position!`)
        }
      }
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –º–∏–≥–∞–Ω–∏—è –≥–ª–∞–∑
    if (isBlinking && leftEyeRef.current && rightEyeRef.current) {
      const blink = Math.sin(time * 3) > 0.8 ? 0 : 1
      leftEyeRef.current.scale.y = blink
      rightEyeRef.current.scale.y = blink
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
    if (isMoving && leftWheelRef.current && rightWheelRef.current) {
      leftWheelRef.current.rotation.x += 0.1
      rightWheelRef.current.rotation.x += 0.1
    }
  })
  
  return (
    <group ref={groupRef} position={position} scale={scale}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫—É–∑–æ–≤ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ */}
      <mesh position={[0, 0.15, 0]} geometry={roundedBoxGeometry}>
        <meshStandardMaterial 
          color={color}
          roughness={0.8}
          metalness={0.2}
        />
      </mesh>
      
      {/* –ß–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω */}
      <mesh position={[0, 0.2, 0.21]} geometry={roundedScreenGeometry}>
        <meshStandardMaterial color="#000000" />
      </mesh>
      
      {/* –õ–µ–≤—ã–π –≥–ª–∞–∑ */}
      <mesh ref={leftEyeRef} position={[-0.1, 0.2, 0.22]}>
        <boxGeometry args={[0.02, 0.08, 0.01]} />
        <meshStandardMaterial color="#ffffff" />
      </mesh>
      
      {/* –ü—Ä–∞–≤—ã–π –≥–ª–∞–∑ */}
      <mesh ref={rightEyeRef} position={[0.1, 0.2, 0.22]}>
        <boxGeometry args={[0.02, 0.08, 0.01]} />
        <meshStandardMaterial color="#ffffff" />
      </mesh>
      
      {/* –õ–µ–≤–æ–µ –∫–æ–ª–µ—Å–æ */}
      <mesh ref={leftWheelRef} position={[-0.2, 0, 0]} rotation={[0, 0, Math.PI/2]}>
        <cylinderGeometry args={[0.1, 0.1, 0.12, 12]} />
        <meshStandardMaterial color="#333333" />
      </mesh>
      
      {/* –ü—Ä–∞–≤–æ–µ –∫–æ–ª–µ—Å–æ */}
      <mesh ref={rightWheelRef} position={[0.2, 0, 0]} rotation={[0, 0, Math.PI/2]}>
        <cylinderGeometry args={[0.1, 0.1, 0.12, 12]} />
        <meshStandardMaterial color="#333333" />
      </mesh>
      
      {/* –¶–µ–Ω—Ç—Ä –ª–µ–≤–æ–≥–æ –∫–æ–ª–µ—Å–∞ */}
      <mesh position={[-0.2, 0, 0]} rotation={[0, 0, Math.PI/2]}>
        <cylinderGeometry args={[0.05, 0.05, 0.14, 8]} />
        <meshStandardMaterial color="#ffffff" />
      </mesh>
      
      {/* –¶–µ–Ω—Ç—Ä –ø—Ä–∞–≤–æ–≥–æ –∫–æ–ª–µ—Å–∞ */}
      <mesh position={[0.2, 0, 0]} rotation={[0, 0, Math.PI/2]}>
        <cylinderGeometry args={[0.05, 0.05, 0.14, 8]} />
        <meshStandardMaterial color="#ffffff" />
      </mesh>
    </group>
  )
}
